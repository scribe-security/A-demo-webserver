name: docker-plugin-check

env:
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
  PRODUCT_VERSION: 1.0.8
  IMAGE_NAME: star-generator
  APP_NAME: Sky-Mapper
  VALINT_BOM_AUTHOR_NAME: Guy-Chernobrov
  VALINT_BOM_AUTHOR_EMAIL: gc@scribesecurity.com
  VALINT_BOM_AUTHOR_PHONE: 052-9281309
  VALINT_BOM_SUPPLIER_NAME: Scribe-Security
  VALINT_BOM_SUPPLIER_URL: www.scribesecurity.com
  VALINT_BOM_SUPPLIER_EMAIL: info@scribesecurity.com
  VALINT_BOM_SUPPLIER_PHONE: 001-001-0011
  INTEGRATION_TEST: 15s
  GITHUB_RUN_NUM: ${{ github.run_number }}
  
  
on:
  workflow_dispatch:
  pull_request:
#  push:
#    branches: [main]

concurrency: 
  group: build-in-${{ github.ref }}
  cancel-in-progress: true

jobs:
  semgrep_scan:
    # User definable name of this GitHub Actions job.
    name: semgrep/ci
    # If you are self-hosting, change the following `runs-on` value:
    runs-on: ubuntu-latest
    container:
      # A Docker image with Semgrep installed. Do not change this.
      image: returntocorp/semgrep
    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read

    steps:
      # Fetch project source with GitHub Actions Checkout.
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Perform Semgrep Analysis
      # @NOTE: This is the actual semgrep command to scan your code.
      # Modify the --config option to 'r/all' to scan using all rules,
      # or use multiple flags to specify particular rules, such as
      # --config r/all --config custom/rules
        run: semgrep scan -q --sarif --config auto > semgrep-results.sarif

      # upload the results for the CodeQL GitHub app to annotate the code
      - name: Save SARIF results as artifact
        uses: actions/upload-artifact@v3
        with:
          name: semgrep-scan-results
          path: semgrep-results.sarif

      # Upload SARIF file generated in previous step
      # - name: Upload SARIF result to the GitHub Security Dashboard
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: semgrep-results.sarif
      #   if: always()


  policy-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # only required for workflows in private repositories
      actions: read
      security-events: write
      id-token: write
    if: (github.actor != 'dependabot[bot]')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          push: false
          tags: ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGE_NAME}}:1.1.${{env.GITHUB_RUN_NUM}}

          # input: trivy:trivy-report.sarif.json
  
      # - name: Install Scribe Docker Plugin
      #   run: |
      #     curl -sSfL https://raw.githubusercontent.com/scribe-security/misc/SH-6730-docker-plugin/docker-cli-plugin/install.sh | sh -s -- -b SH-6730-docker-plugin -d -x

      # - uses: aquasecurity/trivy-action@0.28.0
      #   name: Run Trivy
      #   with:
      #     image-ref: ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGE_NAME}}:1.1.${{env.GITHUB_RUN_NUM}}
      #     format: 'sarif'
      #     exit-code: '0'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     output: 'trivy-report.sarif.json'
      #     # severity: 'CRITICAL,HIGH'


      - name: Download Semgrep results
        uses: actions/download-artifact@v3
        with:
          name: semgrep-scan-results

      - run: |
          ls -lh
          ls -lh testdata || true

      - name: Evaluate Scout Policy
        uses: ./.github/actions/docker-policy-action
        with:
          target: ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGE_NAME}}:1.1.${{env.GITHUB_RUN_NUM}}
          select: scout
          product-key: demo-server
          product-version: ${{env.GITHUB_RUN_NUM}}
          output-directory: evidence
          push-artifacts-evidence: true
          push-github-results: true
          args: |
            --bundle-branch SH-6730-docker-plugin


      # - name: Run Scribe Docker Plugin
      #   run: |
      #     docker policy ${{ secrets.DOCKER_USERNAME }}/${{env.IMAGE_NAME}}:1.1.${{env.GITHUB_RUN_NUM}} \
      #      --select scout \
      #      -o attest \
      #      --product-version ${{ env.PRODUCT_VERSION }} \
      #      --output-directory output_evidence \
      #      --output-file valint.sarif.json.sig \
      #      --bundle-branch SH-6730-docker-plugin

      # #           --input-evidence trivy:trivy-report.sarif.json \

      # - name: Extract Sarif file
      #   run: |
      #     mkdir results
      #     cat  valint.sarif.json.sig | jq -r '.payload' | base64 -d | jq -r '.payload' | base64 --decode | jq '.predicate' | jq '.content' >  results/valint.sarif.json
      #     ls -lh
      #     cat results/valint.sarif.json


      # - name: Upload evidence
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: evidence
      #     path: |
      #       output_evidence
      #       valint.sarif.json
      #     retention-days: 1

      # - name: Upload SARIF file
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: valint.sarif.json
      #     category: scout